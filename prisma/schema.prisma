// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  PREMIUM
  MODERATOR
  ADMIN
  SUPER_ADMIN
}

model User {
  id                  Int       @id @default(autoincrement())
  username            String?
  fullName            String?
  email               String    @unique
  password            String
  firstLogin          DateTime  @default(now())
  lastLogin           DateTime  @default(now())
  profilePicture      String?
  connectingIp        String?
  birthdate           DateTime?
  role                Role      @default(USER)
  tokenVersion        Int       @default(0)
  isEmailVerified     Boolean   @default(false)
  passwordLastChanged DateTime?
  isTwoFactorEnabled  Boolean   @default(false)
  totpSecret          String?
  backupCodes         String?
  externalProvider    String?
  externalUserId      String?
  isExternal          Boolean   @default(false)
  timeZone            String?
  language            String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  photos             Photo[]
  videos             Video[]
  albums             Album[]
  comments           Comment[]
  likes              Like[]
  refreshTokens      RefreshToken[]
  AuthorizationCode  AuthorizationCode[]
  OAuthToken         OAuthToken[]
  UserConsent        UserConsent[]
  UserEvents         UserEvents[]
  UserLogin          UserLogin[]
  UserPrivaySettings UserPrivaySettings[]
  OAuthClient        OAuthClient[]
  sentMessages       Message[]            @relation("Sender")
  receivedMessages   Message[]            @relation("Receiver")
  MessageRead        MessageRead[]
  MessageDeletion    MessageDeletion[]
  PushSubscription   PushSubscription[]
  UserMemory         UserMemory[]
  UserInstruction    UserInstruction[]

  @@index([email])
  @@index([username])
  @@index([role])
  @@index([username, email])
  @@index([username, email, role])
}

model RefreshToken {
  id               Int       @id @default(autoincrement())
  token            String
  userId           Int
  user             User      @relation(fields: [userId], references: [id])
  expires          DateTime
  tokenVersion     Int
  created          DateTime  @default(now())
  createdByIp      String?
  revoked          DateTime?
  revokedByIp      String?
  userAgent        String?
  deviceName       String?
  revocationReason String?
  lastUsed         DateTime?

  @@index([userId])
  @@index([token])
  @@index([expires])
  @@index([revoked])
  @@index([userId, expires])
  @@index([userId, revoked])
  @@index([userId, expires, revoked])
  @@index([userId, expires, revoked, tokenVersion])
}

model Photo {
  id        Int       @id @default(autoincrement())
  url       String
  caption   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  albums    Album[]   @relation("AlbumPhotos")
  comments  Comment[]
  likes     Like[]

  @@index([userId])
  @@index([createdAt])
}

model Video {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  albums    Album[]  @relation("AlbumVideos")

  @@index([userId])
  @@index([createdAt])
}

model Album {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  photos    Photo[]  @relation("AlbumPhotos")
  videos    Video[]  @relation("AlbumVideos")

  @@index([userId])
  @@index([createdAt])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  photoId   Int
  photo     Photo    @relation(fields: [photoId], references: [id])

  @@index([userId])
  @@index([photoId])
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  photoId   Int
  photo     Photo    @relation(fields: [photoId], references: [id])

  @@index([userId])
  @@index([photoId])
}

model OAuthClient {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique
  user              User     @relation(fields: [userId], references: [id])
  clientId          String   @unique
  clientSecret      String
  name              String
  description       String?
  redirectUris      String[]
  allowedScopes     String[]
  logoUrl           String?
  privacyPolicyUrl  String?
  termsOfServiceUrl String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  authCodes    AuthorizationCode[]
  tokens       OAuthToken[]
  userConsents UserConsent[]

  @@index([userId])
  @@index([clientId])
  @@index([createdAt])
  @@index([userId, clientId])
}

model AuthorizationCode {
  id          Int         @id @default(autoincrement())
  code        String      @unique
  clientId    Int
  client      OAuthClient @relation(fields: [clientId], references: [id])
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  scope       String[]
  redirectUri String
  used        Boolean     @default(false)
  expiresAt   DateTime
  createdAt   DateTime    @default(now())

  @@index([clientId])
  @@index([userId])
  @@index([expiresAt])
  @@index([used])
  @@index([clientId, userId])
  @@index([clientId, userId, expiresAt])
  @@index([clientId, userId, expiresAt, used])
}

model OAuthToken {
  id        Int         @id @default(autoincrement())
  token     String      @unique
  type      String // 'access_token' or 'refresh_token'
  clientId  Int
  client    OAuthClient @relation(fields: [clientId], references: [id])
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  scope     String[]
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime    @default(now())

  @@index([clientId])
  @@index([userId])
  @@index([expiresAt])
  @@index([revokedAt])
  @@index([clientId, userId])
  @@index([clientId, userId, expiresAt])
  @@index([clientId, userId, expiresAt, revokedAt])
}

model UserConsent {
  id            Int         @id @default(autoincrement())
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  clientId      Int
  client        OAuthClient @relation(fields: [clientId], references: [id])
  grantedScopes String[]
  revokedAt     DateTime?
  createdAt     DateTime    @default(now())

  @@index([userId])
  @@index([clientId])
  @@index([revokedAt])
  @@index([userId, clientId])
  @@index([userId, clientId, revokedAt])
}

model EmailPasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
  @@index([token])
  @@index([expiresAt])
  @@index([used])
  @@index([email, expiresAt])
  @@index([email, expiresAt, used])
  @@index([email, token, expiresAt])
  @@index([email, token, expiresAt, used])
}

model EmailVerification {
  id        Int      @id @default(autoincrement())
  email     String
  token     String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
  @@index([token])
  @@index([expiresAt])
  @@index([used])
  @@index([email, expiresAt])
  @@index([email, expiresAt, used])
  @@index([email, token, expiresAt])
  @@index([email, token, expiresAt, used])
}

model UserEvents {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  eventType String
  data      String
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([eventType])
  @@index([createdAt])
}

model UserLogin {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  ip        String
  userAgent String
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
  @@index([ip])
}

model UserPrivaySettings {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  settings  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  sender     User     @relation("Sender", fields: [senderId], references: [id])
  receiverId Int
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id])
  content    String
  timestamp  DateTime @default(now())

  MessageRead     MessageRead[]
  MessageDeletion MessageDeletion[]

  @@index([senderId])
  @@index([receiverId])
  @@index([timestamp])
  @@index([senderId, receiverId])
  @@index([senderId, receiverId, timestamp])
}

model MessageRead {
  id        Int      @id @default(autoincrement())
  messageId Int
  message   Message  @relation(fields: [messageId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  readAt    DateTime @default(now())

  @@index([messageId])
  @@index([userId])
  @@index([readAt])
  @@index([messageId, userId])
  @@index([messageId, userId, readAt])
}

model MessageDeletion {
  id        Int     @id @default(autoincrement())
  message   Message @relation(fields: [messageId], references: [id])
  messageId Int
  userId    Int
  user      User    @relation(fields: [userId], references: [id])

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
  @@index([messageId, userId])
}

model IpLocation {
  id          Int      @id @default(autoincrement())
  ip          String   @unique
  country     String
  countryCode String
  region      String
  city        String
  latitude    Float
  longitude   Float
  timezone    String
  offset      Int
  isp         String
  asn         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([ip])
  @@index([latitude])
  @@index([longitude])
}

model PushSubscription {
  id       Int    @id @default(autoincrement())
  userId   Int
  endpoint String
  keys     Json
  user     User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Application {
  id        Int       @id @default(autoincrement())
  name      String
  apiKey    String    @unique
  products  Product[]
  plans     Plan[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([apiKey])
}

model Product {
  id                Int         @id @default(autoincrement())
  name              String
  description       String?
  price             Float
  externalProductId String      @map("stripeProductId")
  externalPriceId   String
  applicationId     Int
  application       Application @relation(fields: [applicationId], references: [id])
  purchases         Purchase[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Plan {
  id                Int            @id @default(autoincrement())
  name              String
  description       String?
  price             Float
  interval          Int
  externalProductId String
  externalPriceId   String
  applicationId     Int
  application       Application    @relation(fields: [applicationId], references: [id])
  subscriptions     Subscription[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model Purchase {
  id          Int      @id @default(autoincrement())
  userId      Int
  productId   Int
  product     Product  @relation(fields: [productId], references: [id])
  purchasedAt DateTime @default(now())
}

model Subscription {
  id                     Int       @id @default(autoincrement())
  userId                 Int
  planId                 Int
  plan                   Plan      @relation(fields: [planId], references: [id])
  externalSubscriptionId String
  startDate              DateTime  @default(now())
  endDate                DateTime?
  active                 Boolean   @default(true)
  status                 String    @default("active")
}

model Instruction {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserMemory {
  id        Int      @id @default(autoincrement())
  userId    Int
  key       String
  value     String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, key, value])
}

model UserInstruction {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  job       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
