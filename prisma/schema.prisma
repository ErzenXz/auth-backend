// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  PREMIUM
  MODERATOR
  ADMIN
  SUPER_ADMIN
}

model User {
  id                  String    @id @default(uuid())
  username            String?
  fullName            String?
  email               String    @unique
  password            String
  firstLogin          DateTime  @default(now())
  lastLogin           DateTime  @default(now())
  profilePicture      String?
  connectingIp        String?
  birthdate           DateTime?
  role                Role      @default(USER)
  tokenVersion        Int       @default(0)
  isEmailVerified     Boolean   @default(false)
  passwordLastChanged DateTime?
  isTwoFactorEnabled  Boolean   @default(false)
  totpSecret          String?
  backupCodes         String?
  externalProvider    String?
  externalUserId      String?
  isExternal          Boolean   @default(false)
  timeZone            String?
  language            String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  photos                Photo[]
  videos                Video[]
  albums                Album[]
  comments              Comment[]
  likes                 Like[]
  refreshTokens         RefreshToken[]
  AuthorizationCode     AuthorizationCode[]
  OAuthToken            OAuthToken[]
  UserConsent           UserConsent[]
  UserEvents            UserEvents[]
  UserLogin             UserLogin[]
  UserPrivaySettings    UserPrivaySettings[]
  OAuthClient           OAuthClient[]
  sentMessages          Message[]               @relation("Sender")
  receivedMessages      Message[]               @relation("Receiver")
  MessageRead           MessageRead[]
  MessageDeletion       MessageDeletion[]
  PushSubscription      PushSubscription[]
  UserMemory            UserMemory[]
  UserInstruction       UserInstruction[]
  AIThread              AIThread[]
  Instruction           Instruction[]
  Application           Application[]
  AIProjectFileVersion  AIProjectFileVersion[]
  AIProjectCollaborator AIProjectCollaborator[]
  AIProject             AIProject[]             @relation("ProjectOwner")
  Agent                 Agent[]
  searchUsage           UserSearchUsage[]
  searchResults         WebSearchResult[]       @relation("UserSearches")

  @@index([email])
  @@index([username])
  @@index([role])
  @@index([username, email])
  @@index([username, email, role])
}

// Add model for storing web search results
model WebSearchResult {
  id            String            @id @default(uuid())
  query         String
  userId        String
  user          User              @relation("UserSearches", fields: [userId], references: [id])
  searchResults Json              @db.JsonB // Stores all search results
  createdAt     DateTime          @default(now())
  sources       WebSearchSource[]

  @@index([userId])
  @@index([query])
  @@index([createdAt])
}

// Model to store individual sources from search results
model WebSearchSource {
  id             String          @id @default(uuid())
  searchResultId String
  searchResult   WebSearchResult @relation(fields: [searchResultId], references: [id], onDelete: Cascade)
  title          String?
  url            String
  sourceType     String // "tavily", "wikipedia", "duckduckgo", etc.
  content        String          @db.Text // The extracted content
  isImage        Boolean         @default(false)
  createdAt      DateTime        @default(now())

  @@index([searchResultId])
  @@index([sourceType])
  @@index([url])
}

model RefreshToken {
  id               String    @id @default(uuid())
  token            String
  userId           String
  user             User      @relation(fields: [userId], references: [id])
  expires          DateTime
  tokenVersion     Int
  created          DateTime  @default(now())
  createdByIp      String?
  revoked          DateTime?
  revokedByIp      String?
  userAgent        String?
  deviceName       String?
  revocationReason String?
  lastUsed         DateTime?

  @@index([userId])
  @@index([token])
  @@index([expires])
  @@index([revoked])
  @@index([userId, expires])
  @@index([userId, revoked])
  @@index([userId, expires, revoked])
  @@index([userId, expires, revoked, tokenVersion])
}

model Photo {
  id        String    @id @default(uuid())
  url       String
  caption   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  albums    Album[]   @relation("AlbumPhotos")
  comments  Comment[]
  likes     Like[]

  @@index([userId])
  @@index([createdAt])
}

model Video {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  albums    Album[]  @relation("AlbumVideos")

  @@index([userId])
  @@index([createdAt])
}

model Album {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  photos    Photo[]  @relation("AlbumPhotos")
  videos    Video[]  @relation("AlbumVideos")

  @@index([userId])
  @@index([createdAt])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  photoId   String
  photo     Photo    @relation(fields: [photoId], references: [id])

  @@index([userId])
  @@index([photoId])
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  photoId   String
  photo     Photo    @relation(fields: [photoId], references: [id])

  @@index([userId])
  @@index([photoId])
}

model OAuthClient {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  clientId          String   @unique
  clientSecret      String
  name              String
  description       String?
  redirectUris      String[]
  allowedScopes     String[]
  logoUrl           String?
  privacyPolicyUrl  String?
  termsOfServiceUrl String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  authCodes    AuthorizationCode[]
  tokens       OAuthToken[]
  userConsents UserConsent[]

  @@index([userId])
  @@index([clientId])
  @@index([createdAt])
  @@index([userId, clientId])
}

model AuthorizationCode {
  id          String      @id @default(uuid())
  code        String      @unique
  clientId    String
  client      OAuthClient @relation(fields: [clientId], references: [id])
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  scope       String[]
  redirectUri String
  used        Boolean     @default(false)
  expiresAt   DateTime
  createdAt   DateTime    @default(now())

  @@index([clientId])
  @@index([userId])
  @@index([expiresAt])
  @@index([used])
  @@index([clientId, userId])
  @@index([clientId, userId, expiresAt])
  @@index([clientId, userId, expiresAt, used])
}

model OAuthToken {
  id        String      @id @default(uuid())
  token     String      @unique
  type      String // 'access_token' or 'refresh_token'
  clientId  String
  client    OAuthClient @relation(fields: [clientId], references: [id])
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  scope     String[]
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime    @default(now())

  @@index([clientId])
  @@index([userId])
  @@index([expiresAt])
  @@index([revokedAt])
  @@index([clientId, userId])
  @@index([clientId, userId, expiresAt])
  @@index([clientId, userId, expiresAt, revokedAt])
}

model UserConsent {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  clientId      String
  client        OAuthClient @relation(fields: [clientId], references: [id])
  grantedScopes String[]
  revokedAt     DateTime?
  createdAt     DateTime    @default(now())

  @@index([userId])
  @@index([clientId])
  @@index([revokedAt])
  @@index([userId, clientId])
  @@index([userId, clientId, revokedAt])
}

model EmailPasswordReset {
  id        String   @id @default(uuid())
  email     String
  token     String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
  @@index([token])
  @@index([expiresAt])
  @@index([used])
  @@index([email, expiresAt])
  @@index([email, expiresAt, used])
  @@index([email, token, expiresAt])
  @@index([email, token, expiresAt, used])
}

model EmailVerification {
  id        String   @id @default(uuid())
  email     String
  token     String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
  @@index([token])
  @@index([expiresAt])
  @@index([used])
  @@index([email, expiresAt])
  @@index([email, expiresAt, used])
  @@index([email, token, expiresAt])
  @@index([email, token, expiresAt, used])
}

model UserEvents {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  eventType String
  data      String
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([eventType])
  @@index([createdAt])
}

model UserLogin {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  ip        String
  userAgent String
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
  @@index([ip])
}

model UserPrivaySettings {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  settings  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Message {
  id         String   @id @default(uuid())
  senderId   String
  sender     User     @relation("Sender", fields: [senderId], references: [id])
  receiverId String
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id])
  content    String
  timestamp  DateTime @default(now())

  MessageRead     MessageRead[]
  MessageDeletion MessageDeletion[]

  @@index([senderId])
  @@index([receiverId])
  @@index([timestamp])
  @@index([senderId, receiverId])
  @@index([senderId, receiverId, timestamp])
}

model MessageRead {
  id        String   @id @default(uuid())
  messageId String
  message   Message  @relation(fields: [messageId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  readAt    DateTime @default(now())

  @@index([messageId])
  @@index([userId])
  @@index([readAt])
  @@index([messageId, userId])
  @@index([messageId, userId, readAt])
}

model MessageDeletion {
  id        String  @id @default(uuid())
  message   Message @relation(fields: [messageId], references: [id])
  messageId String
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
  @@index([messageId, userId])
}

model IpLocation {
  id          String   @id @default(uuid())
  ip          String   @unique
  country     String
  countryCode String
  region      String
  city        String
  latitude    Float
  longitude   Float
  timezone    String
  offset      Int
  isp         String
  asn         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([ip])
  @@index([latitude])
  @@index([longitude])
}

model PushSubscription {
  id       String @id @default(uuid())
  userId   String
  endpoint String
  keys     Json
  user     User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Application {
  id        String             @id @default(uuid())
  userId    String
  user      User               @relation(fields: [userId], references: [id])
  name      String
  apiKey    String             @unique
  products  Product[]
  plans     Plan[]
  usages    ApplicationUsage[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  balance   Float              @default(0)

  @@index([apiKey])
  @@index([apiKey, userId])
}

model AIModelPricing {
  id           String             @id @default(uuid())
  name         String // e.g. "Claude-3.5"
  pricePerUnit Float // Price per token or unit, e.g. 0.01
  quantity     Int // E.g. tokens included per pricing tier (for reference)
  usages       ApplicationUsage[] // Relation to usage history
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  type         String // e.g. "text", "image", "audio", "video"
  model        String // e.g. "gpt-3", "claude-3.5"
  description  String?
  active       Boolean            @default(true)

  @@index([name])
  @@index([pricePerUnit])
}

model ApplicationUsage {
  id               String         @id @default(uuid())
  application      Application    @relation(fields: [applicationId], references: [id])
  applicationId    String
  aiModelPricing   AIModelPricing @relation(fields: [aiModelPricingId], references: [id])
  aiModelPricingId String
  tokensUsed       Int // Number of tokens used
  cost             Float // Cost incurred (tokensUsed * pricePerUnit) at the time of usage
  createdAt        DateTime       @default(now())
}

model Product {
  id                String      @id @default(uuid())
  name              String
  description       String?
  price             Float
  externalProductId String      @map("stripeProductId")
  externalPriceId   String
  applicationId     String
  application       Application @relation(fields: [applicationId], references: [id])
  purchases         Purchase[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Plan {
  id                String         @id @default(uuid())
  name              String
  description       String?
  price             Float
  interval          Int
  externalProductId String
  externalPriceId   String
  applicationId     String
  application       Application    @relation(fields: [applicationId], references: [id])
  subscriptions     Subscription[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model Purchase {
  id          String   @id @default(uuid())
  userId      String
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  purchasedAt DateTime @default(now())
}

model Subscription {
  id                     String    @id @default(uuid())
  userId                 String
  planId                 String
  plan                   Plan      @relation(fields: [planId], references: [id])
  externalSubscriptionId String
  startDate              DateTime  @default(now())
  endDate                DateTime?
  active                 Boolean   @default(true)
  status                 String    @default("active")
}

model Instruction {
  id          String   @id @default(uuid())
  name        String
  description String?
  schema      Json?
  model       String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserMemory {
  id        String   @id @default(uuid())
  userId    String
  key       String
  value     String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, key])
  @@index([userId, key])
  @@index([userId])
}

model UserInstruction {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  job       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Source {
  id        String    @id @default(uuid())
  name      String
  url       String    @unique
  country   String
  language  String
  category  String
  articles  Article[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Article {
  id          String   @id @default(uuid())
  title       String
  link        String   @unique
  content     String?
  summary     String?
  publishedAt DateTime
  sourceId    String
  source      Source   @relation(fields: [sourceId], references: [id])
  author      String?
  imageUrl    String?
  categories  String[]
  country     String
  language    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AIThread {
  id        String            @id @default(uuid())
  title     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  userId    String?
  user      User?             @relation(fields: [userId], references: [id])
  messages  AIThreadMessage[] @relation("AIThreadMessage")

  projectId String?
  project   AIProject? @relation("AIProjectThreads", fields: [projectId], references: [id])

  @@index([userId])
  @@index([createdAt])
  @@index([title])
}

model AIThreadMessage {
  id        String   @id @default(uuid())
  content   String
  role      String // 'user' or 'assistant'
  chatId    String
  chat      AIThread @relation("AIThreadMessage", fields: [chatId], references: [id])
  createdAt DateTime @default(now())

  @@index([chatId])
  @@index([createdAt])
}

model AIProject {
  id            String                  @id @default(uuid())
  name          String
  description   String?
  ownerId       String
  owner         User                    @relation("ProjectOwner", fields: [ownerId], references: [id])
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  // A project can now have many threads
  threads       AIThread[]              @relation("AIProjectThreads")
  files         AIProjectFile[]
  collaborators AIProjectCollaborator[]

  @@index([ownerId])
}

model AIProjectCollaborator {
  projectId String
  userId    String
  // Role could be "editor", "viewer", etc.
  role      String
  project   AIProject @relation(fields: [projectId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@id([projectId, userId])
}

model AIProjectFile {
  id               String                 @id @default(uuid())
  projectId        String
  project          AIProject              @relation(fields: [projectId], references: [id])
  // File name (e.g., "App.tsx")
  name             String
  // File path (e.g., "/src/App.tsx")
  path             String
  // Pointer to the current version (for quick lookups)
  currentVersionId String?
  currentVersion   AIProjectFileVersion?  @relation("CurrentFileVersion", fields: [currentVersionId], references: [id])
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  // The version history for the file
  versions         AIProjectFileVersion[] @relation("FileVersions")

  isDeleted Boolean @default(false)

  @@index([projectId])
  @@index([path])
}

model AIProjectFileVersion {
  id            String          @id @default(uuid())
  fileId        String
  file          AIProjectFile   @relation("FileVersions", fields: [fileId], references: [id])
  // Sequential version number for ordering and revert logic
  version       Int
  // The content of the file at this version
  content       String
  // Optional commit message (e.g., "Fixed bug in header", "Reverted changes")
  commitMsg     String?
  // Author of the commit; can be null for automated changes
  authorId      String?
  author        User?           @relation(fields: [authorId], references: [id])
  createdAt     DateTime        @default(now())
  AIProjectFile AIProjectFile[] @relation("CurrentFileVersion")

  isDeleted Boolean @default(false)

  @@unique([fileId, version])
  @@index([fileId])
}

enum StepType {
  PROMPT // AI prompt execution
  API_CALL // External API calls
  VALIDATION // Schema validation
  TRANSFORMATION // Data transformation
  CONDITION // Branching logic
  LOOP // Iteration over data
  WAIT // Delay execution
  SET_VARIABLE // Set variable value
  ERROR_HANDLER // Handle exceptions
}

model Agent {
  id          String            @id @default(uuid())
  name        String
  description String?
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  steps       AgentStep[]
  credentials AgentCredential[]
  variables   AgentVariable[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([userId])
}

model AgentStep {
  id            String   @id @default(uuid())
  name          String
  description   String?
  type          StepType // Enum for step types
  config        Json // Configuration specific to step type
  order         Int // Default execution order
  agentId       String
  agent         Agent    @relation(fields: [agentId], references: [id])
  nextOnSuccess String? // ID of next step on success (null = continue to next in order)
  nextOnFailure String? // ID of next step on failure (null = stop execution)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([agentId])
  @@index([agentId, order])
}

model AgentCredential {
  id        String   @id @default(uuid())
  name      String // User-friendly name
  type      String // e.g., "api_key", "oauth_token", "basic_auth"
  value     String   @db.Text // Encrypted credential value
  agentId   String
  agent     Agent    @relation(fields: [agentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([agentId, name])
  @@index([agentId])
}

model AgentVariable {
  id           String  @id @default(uuid())
  name         String
  defaultValue String? // Optional default value
  description  String?
  agentId      String
  agent        Agent   @relation(fields: [agentId], references: [id])

  @@unique([agentId, name])
  @@index([agentId])
}

model AgentExecution {
  id            String    @id @default(uuid())
  agentId       String
  status        String // RUNNING, COMPLETED, FAILED
  input         Json
  output        Json?
  executionPath Json // Array of step IDs executed
  startTime     DateTime  @default(now())
  endTime       DateTime?
  stepResults   Json? // Results of each step execution
  errorMessage  String?
  tokenUsage    Int? // Total token usage if applicable
  userId        String // User who initiated the execution

  @@index([agentId])
  @@index([userId])
  @@index([status])
  @@index([startTime])
}

model UserSearchUsage {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  usedRequests  Int      @default(0)
  totalRequests Int      @default(100)
  resetDate     DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}
