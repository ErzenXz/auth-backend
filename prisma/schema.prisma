// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  PREMIUM
  MODERATOR
  ADMIN
  SUPER_ADMIN
}

model User {
  id                  Int       @id @default(autoincrement())
  username            String?
  fullName            String?
  email               String    @unique
  password            String
  firstLogin          DateTime  @default(now())
  lastLogin           DateTime  @default(now())
  profilePicture      String?
  connectingIp        String?
  birthdate           DateTime?
  role                Role      @default(USER)
  tokenVersion        Int       @default(0)
  isEmailVerified     Boolean   @default(false)
  passwordLastChanged DateTime?
  isTwoFactorEnabled  Boolean   @default(false)
  totpSecret          String?
  backupCodes         String?
  externalProvider    String?
  externalUserId      String?
  isExternal          Boolean   @default(false)
  timeZone            String?
  language            String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  photos        Photo[]
  videos        Video[]
  albums        Album[]
  comments      Comment[]
  likes         Like[]
  refreshTokens RefreshToken[]

  AuthorizationCode AuthorizationCode[]

  OAuthToken OAuthToken[]

  UserConsent UserConsent[]

  UserEvents UserEvents[]

  UserLogin UserLogin[]

  UserPrivaySettings UserPrivaySettings[]

  OAuthClient OAuthClient[]

  sentMessages     Message[] @relation("Sender")
  receivedMessages Message[] @relation("Receiver")
}

model RefreshToken {
  id               Int       @id @default(autoincrement())
  token            String
  userId           Int
  user             User      @relation(fields: [userId], references: [id])
  expires          DateTime
  tokenVersion     Int
  created          DateTime  @default(now())
  createdByIp      String?
  revoked          DateTime?
  revokedByIp      String?
  userAgent        String?
  deviceName       String?
  revocationReason String?
  lastUsed         DateTime?
}

model Photo {
  id        Int       @id @default(autoincrement())
  url       String
  caption   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  albums    Album[]   @relation("AlbumPhotos")
  comments  Comment[]
  likes     Like[]
}

model Video {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  albums    Album[]  @relation("AlbumVideos")
}

model Album {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  photos    Photo[]  @relation("AlbumPhotos")
  videos    Video[]  @relation("AlbumVideos")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  photoId   Int
  photo     Photo    @relation(fields: [photoId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  photoId   Int
  photo     Photo    @relation(fields: [photoId], references: [id])
}

model OAuthClient {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique
  user              User     @relation(fields: [userId], references: [id])
  clientId          String   @unique
  clientSecret      String
  name              String
  description       String?
  redirectUris      String[]
  allowedScopes     String[]
  logoUrl           String?
  privacyPolicyUrl  String?
  termsOfServiceUrl String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  authCodes    AuthorizationCode[]
  tokens       OAuthToken[]
  userConsents UserConsent[]
}

model AuthorizationCode {
  id          Int         @id @default(autoincrement())
  code        String      @unique
  clientId    Int
  client      OAuthClient @relation(fields: [clientId], references: [id])
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  scope       String[]
  redirectUri String
  used        Boolean     @default(false)
  expiresAt   DateTime
  createdAt   DateTime    @default(now())
}

model OAuthToken {
  id        Int         @id @default(autoincrement())
  token     String      @unique
  type      String // 'access_token' or 'refresh_token'
  clientId  Int
  client    OAuthClient @relation(fields: [clientId], references: [id])
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  scope     String[]
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime    @default(now())
}

model UserConsent {
  id            Int         @id @default(autoincrement())
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  clientId      Int
  client        OAuthClient @relation(fields: [clientId], references: [id])
  grantedScopes String[]
  revokedAt     DateTime?
  createdAt     DateTime    @default(now())
}

model EmailPasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model EmailVerification {
  id        Int      @id @default(autoincrement())
  email     String
  token     String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model UserEvents {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  eventType String
  data      String
  createdAt DateTime @default(now())
}

model UserLogin {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  ip        String
  userAgent String
  createdAt DateTime @default(now())
}

model UserPrivaySettings {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  settings  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  sender     User     @relation("Sender", fields: [senderId], references: [id])
  receiverId Int
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id])
  content    String
  timestamp  DateTime @default(now())
}
